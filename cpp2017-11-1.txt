1. C++11 中 字符串和数值类型转换：
	to_string() 可以将 int long float double 等数值类型转为 string
	
	int stoi(const string &,size_t *index=0,int base=10);
	long stol(const string &,size_t *index=0,int base=10);
	unsinged long stoul(const string &,size_t *index=0,int base=10);
	long long  stoll(const string &,size_t *index=0,int base=10);
	unsinged long long stoull(const string &,size_t *index=0,int base=10);
	float stof(const string &,size_t *index=0);
	double stod(const string &,size_t *index=0);
	long double stold(const string &,size_t *index=0);
	说明：
		a. 当参数 字符串中包含非数值字符时，从字符串开头进行转换，直到第一个非数值字符
				并将该非数值字符的索引赋值到传入的 index 地址中
		b. 当 字符串中为 负数数值时，若转为 unsinged long 等数值时，会返回一个很大的正数
		c. 如果转换的值超过返回类型的范围，则抛出 out_of_range 异常
		d. size_t * 参数传入的参数 必须为 size_t *, 而不能为 int *等类型	
2.C++11 中原始字符串
	string 类型常量不支持换行：
		string s="Line 1
			line 2 \t (and)
		end";
		报错， 可以使用\ 连接换行，但定义的常量中没有换行符
	可以 在字符串常量前 使用R前缀，并在使用()括主常量，
	还可以添加前后分界符，作为结束判断：
		str=R"(Line1
				line "2" \t (and)
				end)";
		其中 \t "" 换行符 都将按原字符保存，而不会进行转义		
		但若 字符常量中 包含)" 则会把)" 作为结束，而报错，因此需添加分界符，如~		
		  str=R"~(Line1
				line "2" \t (and)"
				end)~";
3.C++11 中正则表达式：
		位于 regex 头文件，
		在g++ 4.9前，不支持 regex,在编译后 运行时，
			会抛出regex_error异常
	(1)初始化 regex 对象
		默认下 正则表达式 使用 ECMAScript 语法，
		没有//开头和结束分隔符， 模式中的\ 需要进行两次转义
		可以进行多行匹配（字符串中包含\n,或R原字符串）
		a. 初始化形式：
			 string pattern="^a\\w+$";
			  regex first; //默认为空
			  regex second=first;
			  //传入 模式字符串，也可以是 char*
			  //或者 字符串区间范围迭代器
			  regex third(pattern);
			  regex third(pattern.begin(),pattern.end());
		b.传入 额外参数：
			 选项参数常量 位于 std::regex_constants 命名空间
			主要的参数：
				icace 默认为区分大小写，传入 该参数表示不区分大小写
				指定 正则表达式 语法：
					ECMAScript（默认）	basic extended awk grep egrep
				regex seventh(pattern,ECMAScript | icase);

				icase 不会修改 元字符中的大小写匹配	,因此
					regex ninth("^[0-9A-Z]+$",ECMAScript | icase);
					不会匹配到 有小写字符的字符串
		c. 重新分配模式：
				assign()
				//在没有引入 std::regex_constants 命名空间时，则使用regex::限定符
				first.assign("^a\\w+$",regex::icase);
				first.assign(third);
				//不支持该形式
				//first.assign(third,regex::icase);
	(2)regex_match():
			是对目标字符串进行全匹配，而不是部分进行匹配
				即 相当于 模式前后自动添加了^ $  
		 当目标字符串 完全匹配时 返回 true,否则返回false
			if(regex_match(s,first))
			{
			  cout << "first match\n";
			}
		还可以获取匹配到的结果：
			先定义 cmatch 或smatch 类型对象用于保存匹配结果
				其中 
					typedef match_results<const char*> cmatch;
					typedef match_results<string::const_iterator> smatch;
				即 为match_results<T> 的不同 模板参数类型 的类别名
			当匹配成功时，可以通过 operator[] 获取匹配的子模式，
				其中 0为全匹配的结果，在 regex_match()即为目标字符串
					1为子模式1 匹配的结果 ....
					
					smatch sm;
			
					//支持 最短匹配格式, 可以匹配到K M G
					regex re(".*?(\\d+)/(k|m|g).*",regex::icase);

					string s1="this is a size of file 28/M and 463/M, 2.1/G, 65.4/kor tke3G 5/Ger54/Kopje";
			
					if(regex_match(s1,sm,re))
					{
						cout << "string object with " << sm.size() << "matches\n";
						for(int i=0; i<sm.size(); i++)
						{
							cout << i+1 << "match: " << sm[i] <<endl;
						}
						
					}
				说明：	
					a. 匹配的结果 match_results<T> 的 size()为匹配到结果中的子模式的个数+1， 
						而不是 总匹配到的个数，regex_match()只可能为匹配到1个
					b.由于 regex_match()为全匹配，因此要对部分进行匹配，则需添加.*? .*前后任意字符标识
					c.支持 最短匹配格式, 且 regex::icase 对(k|m|g) 字符有效
						
	(3) match_results<T> 方法：
			对于 使用(?:) 开头的分组，不会被捕捉到 子模式中
			regex re2("(\\d{4})/(?:0?[1-9]|1[0-2])/(?:0?[1-9]|[1-2][0-9]|3[0-1])");	
			string date="2017/11/01";
			smatch sm2;
			regex_match(date,sm2,re2);
			sm2.size();  // 2, 即 子模式只有(\\d{4})
			a. 可以通过 begin() end() cbegin() cend() 遍历当前匹配的结果 的 子模式的结果
					迭代器 为指向  sub_match 对象类型
			b. prefix() 返回  sub_match 对象，保存 匹配到的结果 前的字符串
					当使用regex_match()匹配时，由于regex_match()全匹配，
								因此prefix() 始终为 空
			  suffix() 返回 sub_match 对象，保存 匹配到的结果 后的字符串	
						当使用regex_match()匹配时，由于regex_match()全匹配，
						因此suffix() 始终为 空
			c. position(int n) 获取 指定的子模式 匹配到的结果 在原字符串中的索引值
				length(int n) 获取 指定的子模式 匹配到的结果 的字符串长度
				可以通过 position(int n)+length(int n) 获取在参数目标字符串中，匹配的结果后的字符串
				
			d. operator[]() str(int) 获取子模式的匹配结果的结果
				其中 operator[]()返回 sub_match 对象, str()返回字符串类型
				例：获取全部匹配到的结果：
					//累加 获取在原字符串的位置
					size_t total_len =sm.position(2)+sm.length(2);
					string tmp =s1.substr(total_len);
					cout << tmp <<endl;
					
					while(regex_match(tmp,sm,re))
					{
						cout << "Next match #" << count++ << endl;
							cout << "\tstring object with " << sm.size() << "matches\n";
								for(int i=0; i<sm.size(); i++)
								{
									cout << '\t'<< i+1 << "match: " << sm[i] <<endl;
								}
						
						//累加 获取在原字符串的位置，
						//由于position() 和length()是以传入的参数字符串为参照，
						//因此若直接使用该值 在原字符串位置进行截取，可能会造成无限循环
						total_len+=sm.position(2)+sm.length(2);
						tmp=s1.substr(total_len);
						cout << tmp <<endl;
						
					}
	(4)regex_search() 部分匹配，与 regex_match()参数类似，
				可以多传入额外参数修改正则匹配语法
			使用 regex_search() 获取全部匹配到的结果：
			
			//不需要添加 任意字符前后
				regex re1("(\\d+)/(k|m|g)",regex::icase);
				if(regex_search(s1,sm,re1))
				{
					cout << "string object with " << sm.size() <<" matches\n";
					for(smatch::iterator it = sm.begin(); it!=sm.end(); ++it)
					{
						cout <<"\t match: " << it->str() <<endl; 
					}
					cout << endl;
					//可以直接使用 suffix()返回的匹配后的字符串进行再次匹配
					string tmp = sm.suffix();
					int count =2;
					while(regex_search(tmp,sm,re1))
					{
						cout << "Next match #" << count++ << endl;
						cout << "string object with " << sm.size() <<" matches\n";
						//使用 迭代器进行遍历，调用 sub_match 的str()方法获取每个子模式匹配到的结果
						for(smatch::iterator it = sm.begin(); it!=sm.end(); ++it)
						{
							cout <<"\t match: " << it->str() <<endl; 
						}
						cout << endl;
						tmp = sm.suffix();
						
					}
	(5)regex_iterator 迭代器 获取全部匹配到的结果
			尽量不要使用 以上的循环获取 全部匹配的结果，而是通过regex_iterator 迭代器
			先 使用默认构造函数创建一个 regex_iterator 对象， 该对象 用作判断遍历结束
			然后通过 传入目标字符串范围 和匹配模式参数(str_begin,str_end,regex) 
			创建 regex_iterator 对象，并使用该对象 来遍历，
			 其中每次迭代  为指向 match_results 对象类型，
			
			声明了 以下别名 
			typedef regex_iterator<const char*> cregex_iterator	
			typedef regex_iterator<std::string::const_iterator> sregex_iterator	
		例：		
			const sregex_iterator send;
			int num=1;
			for(sregex_iterator it(s1.begin(),s1.end(),re1); it!=send; ++it)
			{
				cout << "Next match #" << num++ << endl;
					cout << "string object with " << it->size() <<" matches\n";
					for(int i = 0; i< it->size(); ++i)
					{
						//调用 match_results 中的方法
						cout <<"\t match: " << it->str(i) <<endl; 
					}
					cout << endl;
			}	
	(6)regex_token_iterator  获取指定子模式中的匹配结果, 默认为 0， 即整体匹配的结果
		 其中每次迭代  为指向 sub_match 对象类型，
		 当 为 -1 时 则使用 匹配到的整个结果作为分隔符，将 没有匹配到的字符串 分割，并将结果进行遍历
			const sregex_token_iterator end;
			for(sregex_token_iterator it(s1.begin(),s1.end(),re1); it!=end; ++it)
			{
				cout << "Next match #" << num++ << endl;
				cout <<  it->str() <<endl;
			}		
		//只获取 第一个子模式 匹配到的字符串
			for(sregex_token_iterator it(s1.begin(),s1.end(),re1,1); it!=end; ++it)
				{
					cout << "Next match #" << num++ << endl;
					cout <<  *it <<endl;
				}
		// 分割字符串		
		for(sregex_token_iterator it(s1.begin(),s1.end(),re1,-1); it!=end; ++it)
				{
					cout << "Next match #" << num++ << endl;
					cout <<  it->str() <<endl;
				}
	(7)regex_replace() 搜索字符串全部匹配的子字符串，并用指定的字符串进行替换，
			并将替换后的整个字符串返回
			a.在 替换字符串中 特殊字符：
				$& 表示匹配到整个子字符串
				$1 $2 $3 ... 表示匹配到的子模式结果字符串
					不能对子模式数字后不能再跟数字否则将共同作为子模式，
					 如 $21 表示 第21 个子模式，而不是$2 后添加一个1；
							且不支持使用符号进行分割
					最大支持两位数字	
				$$ 表示 $, 当$后字符有特殊含义时，可使用该形式转化
				$´表示当前匹配子字符串的之前字符 
				$`表示当前匹配子字符串的之后字符
			b.修改替换行为标志：
				regex_constants::format_first_only 
						只替换第一个匹配到的字符串，默认替换全部匹配到的字符串
				format_no_copy 表示只返回 对 匹配到的字符串进行替换后的字符串，剩余字符串不会返回
					string replacement("{$&}[$2-$3-$1]");
					regex re2("(\\d{4})/(0?[1-9]|1[0-2])/(0?[1-9]|[1-2][0-9]|3[0-1])");	
					
					string res = regex_replace(date,re2,replacement,regex_constants::format_first_only);
			c. 将替换的结果放到指定容器位置：
					auto it = regex_replace(back_inserter(res),date.begin(),date.end(),
									re2,"$2-$3-$1",regex_constants::format_no_copy);
					将替换的结果 保存到 res 最后位置，并返回保存后的最后位置的迭代器
					其中 back_inserter(res)获取 res 的最后位置的迭代器
							位于 iterator 头文件
					或者可使用以下实现
					size_t size = res.size();
					res.resize(size*2);
					auto it = regex_replace(res.begin()+size,date.begin(),date.end(),
									re2,"$2-$3-$1",regex_constants::format_no_copy);

4. 有理数 ratio 位于 ratio 头文件，
	(1)定义 ratio 对象：
		typedef ratio<1,2> r1; 表示 1/2
		只能传入常量，不支持变量
		const intmax_t n=2;
		const intmax_t d=6;
		typedef ratio<n,d> r2; // 1/3 会进行公约数处理
		若传入 小数，则只保留 整数部分
		  const intmax_t n2=2.75;
		  const intmax_t d2=6.9;
		  typedef ratio<n2,d2> r3; // 1/3
		获取 保存的数值：
				num 为分子； den 为分母
		  cout << "Sum=" << sum::num <<"/" << sum::den ;
		  //计算值
		  cout << " ( which is: " <<(double(sum::num)/sum::den) << ") \n";
	(2)+ - * / 运算：
		 
		  typedef ratio_add<one_half,two_thirds> sum;

		  typedef ratio_divide<two_thirds,i> r4;
		  typedef ratio_subtract<one_half,two_thirds> r5;		 
		  typedef ratio_multiply<one_half,two_thirds> r6;
		说明： 
			传入的参数必须为 ratio 对象，而不能是 数值如：
			  typedef ratio_divide<two_thirds,2> r4;
		 定义的对象 仍为 ratio 对象	，故可以通过 num 和 den 获取计算值
	(3) 比较运算：
		  typedef ratio_equal<r1,r2> eq1; //false
		  typedef ratio_not_equal<r4,r6> eq2; //false
		  typedef ratio_greater<r2,r3> gt1; //true
		 
		  typedef ratio_less<one_half,two_thirds> lt1; //true
		 
		  typedef ratio_greater_equal<one_half,r2> gle1; //true
		 
		  typedef ratio_less<r4,r6> lt2; //false
		 
		  typedef ratio_less_equal<r4,r6> lte1; //true
		获取比较结果 需通过 value 来获取  
		  cout << lte1::value << endl;
5. chrono 库 用于操作时间的库
		位于 chrono 头文件，
		命名空间 为 std::chrono
	(1)duration<T,ratio<1> > 表示时间间隔类	
			 ratio<1> 表示 时间单位 默认 为1s，当指定 60时，则表示 60s 即 1分钟
			 T 为 int long float double 等 数值类型， 表示时间长度
		a. duration 类 可以 在不同的 ratio<> 下的数值进行转化，
				当转化后的值可能为小数时，则 T 必须传入 double 或float 否则会报错
				即当转化为 ratio<> 指定的单位较大时，则必须定义为float 或double类型
		b. 可以进行 数值计算 + - / * ++ -- 
		c. 在 进行比较时，会根据 ratio 指定的单位下的值进行比较
			  
				  using namespace std::chrono;
  
				  duration<long> dur1(20); //20s
				  duration<int,ratio<60> > dur2(3); // 3min
					//调用 count() 方法 获取 数值
				  cout << "dur1 count: " << dur1.count() <<endl;
				  cout << "dur2 count: " << dur2.count() <<endl;
				  dur2++;
				  dur1*=2;
				  if(dur2 > dur1) //true
					{
					  cout << "dur2 >dur1\n";
					}else{
					cout << "dur2 <=dur1\n";

				  }
				  //不同 ratio<> 值进行计算
				   duration<double, ratio<60> > dur3 = dur1+dur2;
				   //由于 在转化 为 ratio<60> 数值为小数，故不能定义为
				   //long
				  //duration<long, ratio<60> > dur3 = dur1+dur2;

				  cout << "dur3 count: " << dur3.count() <<endl;
				  // 计算结果 保存为 ratio<1> 下的值
				  duration<long, ratio<1> > dur4 =dur1+dur2; //280s
				  cout << "dur4 count: " << dur4.count() <<endl;
				 //不同 ratio<> 下 数值转化		
				  duration<long> dur5(30);
				  duration<double, ratio<60> > dur6(dur5); //0.5
				  cout << "dur5 count: " << dur5.count() << endl;
				  cout << "dur6 count: " << dur6.count() <<endl;
				  duration<double> dur7;
				  //max() 返回指定的数值类型 double 在指定的ratio<>下的最大duration值
				  dur7 =dur7.max();
				  cout << "dur7 count: " << dur7.count() <<endl;
		d. 在 chrono 头文件中定义了特定的时间单位 类型：
					hours	signed integral type of at least 23 bits	ratio<3600,1>
					minutes	signed integral type of at least 29 bits	ratio<60,1>
					seconds	signed integral type of at least 35 bits	ratio<1,1>
					milliseconds	signed integral type of at least 45 bits	ratio<1,1000>
					microseconds	signed integral type of at least 55 bits	ratio<1,1000000>
					nanoseconds	signed integral type of at least 64 bits	ratio<1,1000000000>
			由于 以上定义的类型为 整数形式，因此不能将 单位较小的类型 转为 单位较大的类型：
					seconds s(60);
					//minutes m(s); //报错
	(2)clock : 
				定义了 3个clock:
					system_clock 表示系统时钟的真实时间
					steady_clock 保证 其time_point 不会减小的时钟
					high_resolution_clock 滴答周期最小值
				
				每个clock 可通过 now() 静态方法获取 该时钟的当前时间，类型为 time_point
					可以通过 to_time_t() 将time_point 转为 time_t 类型
						from_time_t() 将 time_t 转为 time_point 类型
					//获取系统时间	
					  system_clock::time_point tpoint = system_clock::now();
					  time_t tt =system_clock::to_time_t(tpoint);
					  //转为 本地时间
					  tm*t =localtime(&tt);
					 //显示 时间字符串
					  char buffer[80]={0};
					  strftime(buffer,sizeof(buffer),"%H:%M:%S",t);
					  cout << buffer << endl;
	
	(3)time_point   与 特定的clock 关联，表示时间 中的一个点，
						存储 距离 与关联的clock 的原点 的duration 表示的值
						可以通过 time_since_epoch() 方法获取
								距离 与关联的clock 的原点 的duration 
				构造函数：
					time_point<clock>() 保存关联时钟的纪元
					time_point<clock>(const duration &) 保存 距离纪元 指定duration
					也可以通过特定的 clock 的 time_point来定义对象
						system_clock::time_point tpoint
				支持有意义的+ -操作
					
				  time_point<steady_clock> tp1;
				  tp1+=minutes(10);
				  duration<double> tsc = tp1.time_since_epoch();
				  cout << tsc.count() << endl;

		统计执行时间：
				  system_clock::time_point start =system_clock::now();
				  double dd=0;
				  for(int i=0; i<100000; ++i)
					{
					  dd+=sqrt(sin(i) *cos(i));
					}
				  system_clock::time_point end = system_clock::now();
				  duration<double> diff = end -start;
				  cout << duration<double,milli>(diff).count() <<endl;
6.随机数：
		random 头文件
		//创建 一个 随机引擎 适配器
		mt19937 eng(static_cast<unsigned long>(time(nullptr)));
		//创建 分布器	
		uniform_int_distribution<int> dist(1,99);
		// 生成随机数
		cout << dist(eng) <<endl;
		其中：
			a. 随机引擎 包括：
				random_device 真实的随机数生成器，通过连接到一个真正生成随机数硬件
								若没有，则选择一种算法进行模拟 产生伪随机数
								随机数生成器的质量由随机数的熵决定，当为 伪随机生成器时，则
									熵为 0.0
						random_device rnd;
						//获取熵 0
						cout << "Entropy: " << rnd.entropy() <<endl;
						//最小值为 0 最大值： 4294967295
						cout << "Min Value: " << rnd.min() <<endl;
						cout << ",Max value: " << rnd.max() <<endl;
						// 生成随机数，可能为 很大的数，且每次运行时，生成的随机数相同
						cout <<"Random number: " << rnd() <<endl;	
				以下为 伪随机数生成器：				
					linear_congruential_engine 
					mersenne_twister_engine
					shuffle_order_engine
				伪随机数生成器 使用时，需调整多个 数学参数
				因此 可以使用 预定义的随机数引擎适配器
			b.随机数引擎适配器
				  default_random_engine  
					minstd_rand	
					minstd_rand0
					mt19937
					mt19937_64
					ranlux24
					ranlux48
					knuth_b
			c.随机数分布：
					分布 是一个 描述数字 在一个特定范围内分布的 数学公式
					可以与 伪随机引擎结合定义生成的随机数的分布，
					从而影响 随机数的生成
					uniform_int_distribution 均匀分布
					uniform_real_distribution
					normal_distribution  正态分布
			生成的随机数系列：
			//由于 随机数生成函数 类型未知，因此使用 函数模板
			template <typename T>
			void generateRandom(vector<int> & vec, T gen)
			{
				generate(vec.begin(),vec.end(),gen);
			}	
			其中 随机生成函数 可使用 bind()将 引擎适配器参数绑定到 分布器参数：
				vector<int> rand_num(10);
				auto func = bind(dist,eng); //绑定参数
				
				generateRandom(rand_num,func);
7.tuple	元组， 位于 tuple 头文件
			可以保存多个不同类型元素
		tuple<int,string,bool> tp1(16,"Test",true);	
		也可以传入变量，
		默认为保存 该变量值，可以通过指定 引用类型参数 且调用ref() 或 cref() 封装变量
				int m=40;
				string s="Hello";	
				tuple<int&,string&,bool>tp2(m,ref(s),false);
					s="llkekj";	
					m=20;
				//影响到 保存的值	
				cout <<get<0>(tp2)<<", " << get<1>(tp2) <<endl;	
			说明：
				a. 当 模板参数没有添加& 引用时，或 没有使用 ref()或cref() 时，都会只保存值，
					而非变量引用
				b. 对于保存的变量引用，当对元组元素修改时，会影响到该变量值
					get<0>(tp2)=60;
					get<1>(tp2)="ppppe";
		(1) make_tuple() 可以通过该方法将多个变量 封装并返回指定的类型的 tuple
				其中 当 使用 ref()或 cref()封装 变量时，则会自动将模板参数设置为 引用形式
				但若 使用显式指定非引用形式 的变量 保存，则会只保存 值
				tuple<int,string&,bool> tp2= make_tuple(ref(m),ref(s),false);
				其中 第一个元素 为值保存
		(2)get<n>() 获取指定索引的值，返回的类型为 保存的值的类型
		(3) tuple_size<T1,T2...>::value 获取指定的 tuple 模板 保存的元素个数						
				tuple_size<tuple<int,string,bool> >::value //3
		(4) tuple_cat()
				连接任意多个 tuple 对象，返回新的tuple 对象
				若 参数中的tuple对象中的元素类型 为引用类型，则在结果的tuple对象中，仍为原引用
				auto tp3=make_tuple(25,"abc",'c',34.76);
				auto tp4 = tuple_cat(tp1,tp2,tp3);
		(5)tie() 将一个tuple 对象分解到各个参数中
				int n1,n2,n3;
				char c; double d;				
				string str1,str2,str3;
				bool b1,b2;
				tie(n1,str1,b1,n2,str2,b2,n3,str3,c,d)=tp3;
			对于 tuple对象中类型 为引用类型	的元素，在分解后，仍为原变量的引用，因此修改该变量
				会影响到 原变量值和tuple 对象中的值
		(6)支持 > < == != 比较运算：
				所有元素类型必须支持比较运算，依次比较元素的大小

8. 迭代器适配器 位于 iterator 头文件
	(1) reverse_iterator 倒序迭代器
		  倒序遍历容器元素：
		  vector<string> str_vec(10);
			vector<string>::reverse_iterator rit;
			//或者
			//reverse_iterator<vector<string>::iterator > rit;	
			for(rit=str_vec.rbegin();rit!=str_vec.rend(); ++rit)
			{
				cout <<"position: " << (rit.base() - str_vec.begin()) << ", value: " << *rit <<endl;
			}
		说明：
			a. 在遍历时，使用 自增++ 运算修改 迭代器
			b.base() 方法 返回 底层的迭代器对象，但指向当前元素的下个元素的位置（正向），
				因此 以上 position 输出为 10 9 8 7 6 5 4 3 2 1
				因此若获取正确的位置索引，应 -1
		 查询最后一个匹配的元素：
			rit=find(str_vec.rbegin(),str_vec.rend(),s);
	(2) ostream_iterator 迭代器	：
			输出流迭代器，构造函数传入 输出流对象 和 每个元素输出后输出的string
		 ostream_iterator 通过 operator<< 进行输出
			//调用 copy() 将容器元素输出
			ostream_iterator<string> out_it(cout,"\n");
			copy(str_vec.rbegin(),str_vec.rend(),out_it);
	(3)	插入迭代器：
			copy()算法 只能将元素进行覆盖原元素 复制，因此需要在执行前，对目标容器分配足够的空间
			可以通过 插入迭代器，将复制的元素进行插入 复制到目标容器，而不需要提前分配大小
			因此 可以通过 插入迭代器 和copy()方法 来循环 调用 insert() 或 push_back() push_front() 方法
				而不需要显式 循环遍历调用
		a.    back_insert_iterator 模板参数容器 必须包含 push_back()方法，调用该方法插入到目标容器末尾
    			back_insert_iterator<vector<string> > insert_iterator(str_vec1);
	    		remove_copy_if(str_vec.begin(),str_vec.end(),insert_iterator,tooLong);
	    	其中：当目标容器中已有元素时，不会覆盖原有元素
	    b.  front_insert_iterator 容器必须包含 push_front()方法，调用该方法插入到目标容器开头
    			因此 不能用于 vector
				list<string> list1;
				list1.insert(list1.end(),"skfea");
				list1.insert(list1.end(),"kleee");
				remove_copy_if(str_vec.begin(),str_vec.end(),front_insert_iterator<list<string> >(list1),tooLong);
 			说明： 依次插入到目标容器开头位置，原容器中遍历顺序在后的元素 则插入目标容器在前面
 		c.	     insert_iterator 调用 容器的insert(position,element) 方法
				   因此 在构造函数中，需传入 首次插入的位置, 在执行插入时，会每次修改该位置
				set<string> set1;
				set1.insert(set1.end(),"ttt");
				set1.insert(set1.end(),"yyy");
				insert_iterator<set<string> > insert_iterator1(set1,++set1.begin());
				remove_copy_if(str_vec.begin(),str_vec.end(),insert_iterator1,tooLong);
			说明： 在gcc 5.4.0 中，以上编译 始终报错  insert_iterator<set<string> >
						expected primary-expression before ‘>’ token
				   在 gcc 6.3.0 中	可以执行，由于 set 会对元素进行排序，因此输出时的元素是按照排序的顺序
					使用 list 容器
					list<string> list1;
					list1.insert(list1.end(),"aaaa");
					list1.push_back("tdk");
					insert_iterator<list<string> > insert_iterator2(list1,++list1.begin());
					remove_copy_if(str_vec.begin(),str_vec.end(),insert_iterator2,tooLong);
				插入到 开始的指定的迭代器之前，按照原容器中遍历顺序 进行插入	
	(4)移动迭代器： c++11中使用
			当 元素类型 中定义了 移动构造函数 和移动赋值运算，则可以通过使用
				make_move_iterator()
				将迭代器封装为 移动迭代器，因此在复制或其他运算时，会调用 移动构造函数 和移动赋值运算
				这样 原容器中的元素 将不能再访问
			    vector<MoveableClass> move_vec2(make_move_iterator(move_vec.begin()),
                                    make_move_iterator(move_vec.end()));
9.获取迭代器 类型信息：
	 
	iterator_traits<iterator> 中定义 以下成员，保存模板参数 iterator 的类型信息：
		difference_type	 模板参数 iterator 执行 + -运算 的结果类型
		value_type	模板参数 iterator 当前指向的元素类型
		pointer	模板参数 iterator 指向的元素类型 的指针类型
		reference	模板参数 iterator 指向的元素类型 的 引用类型
		iterator_category	模板参数 iterator 的分类，返回值为以下类型之一
								input_iterator_tag
								output_iterator_tag
								forward_iterator_tag
								bidirectional_iterator_tag
								random_access_iterator_tag
	template <typename IteratorType>
	void iteratorTraitsTest(IteratorType it)
	{
			//获取迭代器的 类型信息
			
		  typedef  iterator_traits<IteratorType> traits;

		  cout << (typeid(typename traits::difference_type)).name() <<endl;

		  cout <<(typeid(typename traits::pointer)).name() <<endl; 
		  cout << (typeid(typename traits::reference)).name() <<endl; 
		  cout << (typeid(typename traits::value_type)).name() <<endl; 
		  cout <<(typeid(typename traits::iterator_category) == typeid(random_access_iterator_tag)) <<endl;
		 
	 	  cout <<typeid(typename traits::iterator_category).name() <<endl;
	  
	  }
	  
	说明	：	a. 对带有模板参数 的类型 使用 typedef 进行定义别名时， 不能添加 typename 
		       因此只能在 使用 定义的别名时 添加 typename					  
			b. value_type 获取该迭代器指向的元素的类型
				可以定义该类型的变量， 需添加 typename 关键字
		 		 typename  iterator_traits<IteratorType>::value_type temp;
		  		temp =*it;
		  		cout << temp <<endl;
		  	c. 调用该函数：
		  			  vector<int> vec={3,4,5,4,5,6,5,8};
		 			iteratorTraitsTest(vec.begin());
		 		在 iteratorTraitsTest() 中依次输出：
		 			 l Pi i i  1 St26random_access_iterator_tag		
10.
	(1) 类模板 的具体化模板 中的方法 在实现时，不能 添加 template<> 前缀，否则 会视为 函数模板 定义
	(2)类模板 在定义时的 参数类型中指定 默认参数类型时， 则 在定义方法时 只需添加 参数类型，不能再带有默认参数类型
	(3)	同一类型的容器 对象属性 可以直接使用 复制构造函数 实现复制，而不需要 手动逐一遍历复制
	(4) 对于 在类中定义的类型，作为方法的返回值时， 则在方法实现时 需使用 该类的限定符前缀 引用 该定义的类型
			且 若为 类模板，则需 添加 typename 关键字：
				template <typename  Key, typename T, typename Compare ,  typename Hash  >
					 typename  hashmap<Key,T,Compare,Hash>::value_type * hashmap<Key,T,Compare,Hash>::find(const key_type & x) const
					 {
					 }
			 当在类模板中 声明该方法时，若返回值 需要 类模板的类型参数，则也需使用 typename:
				typename list<pair<const Key,T> >::iterator findElement(const key_type & x, size_t & bucket) const;	
		 
				当 类模板参数位于 其他模板参数中，则 typename 应在 该模板参数列表中
				pair<typename  hashmap<Key,T,Compare,Hash>::iterator,bool> hashmap<Key,T,Compare,Hash>::insert(const value_type & x)
		而在参数列表中 的 类中定义的类型， 则可以直接使用定义的类型，不需要 使用 类的限定符	
	 (5)当 方法返回的类型 为 元素的指针时， 则
	 		若返回空，可以返回 nullptr
	 		若返回某个元素的地址 则，可以对 迭代器 进行的* 和 & 操作：
	 			return &(*it);  		 			 		
	(6)类模板中 定义 函数模板， 实现该函数模板时形式：
		使用 两层 template<>
		template <typename  Key, typename T, typename Compare,  typename Hash >
		template <typename InputIterator>
		hashmap<Key,T,Compare,Hash>::hashmap(InputIterator first,InputIterator last,
				const Compare & comp, const Hash& hash
				)throw(invalid_argument)
				{
					
				}
	(7) forward<T>(x) 位于 utility 头文件
		当参数变量为右值引用时，则仍返回该右值引用类型， 若直接将 变量 传入到函数中，则会视为 左值
		因此可以通过 该函数保持 右值引用的类型
		foo(int && x){
			bar(forward<int>(x)); //调用 bar(int &&) 形式
		}	
	(8) 当遍历删除元素时，不能 直接使用
			for(auto it= begin; it!=end; ++it){list.erase(it);}
			由于 在删除后原it 指定的位置 再执行++ 运算时，将不会再定位到下个元素，
			因此 应先定位到下个元素后， 再执行删除操作
			
			auto cur =begin;
			for(auto next = begin; next!=end;)
			{
				cur =next++;
				list.erase(cur);
			}
	(9)emplace(position,value) emplace_back(value) emplace_front(value)	
		c++11 中 添加的 插入元素的方法， 
		push_back() push_front() 和 insert() 方法 会调用 元素的复制构造函数或移动函数
		来插入元素， 而 emplace() 方法 只调用 构造函数，支持传入的参数为 元素的构造函数的参数列表
		然后直接使用传入的参数 构造元素对象