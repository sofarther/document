1.  Swoole\Async\MySQL 异步MYSQL：
		 继承 Swoole\Async\Pool
	(1) Swoole\Async\Pool:
		a.构造函数：
			 __construct($config = array(), $poolSize = 100)
			初始化 config  和 poolSize 属性，
					其中 config 用于 进行连接的配置信息，
						poolSize 表示最大连接数
				taskQueue  属性保存 \SplQueue 对象，用于 存储 在获取连接资源后要执行的函数队列
				idlePool  属性保存 \SplQueue 对象，用于	存储 空闲的连接资源句柄
		b.join($resource)
			将传入的 资源句柄 保存到 resourcePool 数组中，并调用 release($resource)
				该方法应在 资源已连接成功后 再调用
		c. release($resource)，
			将 $resource 保存到 idlePool  属性中，并判断若 taskQueue 队列中有任务，则调用 doTask()方法
		d.doTask()
			从 idlePool  属性 中依次取出一个空闲 的连接资源， 并通过 resourcePool 判断是否可用，
				若 有可用的空闲的连接资源，则 从 taskQueue 取出一个 函数，调用该函数，并传入 该资源句柄
			若全部都不可用，则
			 	判断 若resourcePool 数组为空 ，则调用 createFunction 属性保存的 用于创建新连接资源的函数
			 		其中 createFunction属性可通过 create($callback) 进行赋值
		f. remove($resource)
			从 resourcePool 数组中移除 资源
		g.request(callable $callback)
				$callback 为 在获取到 可用的空闲资源后，要执行的函数
				将 	$callback  添加到 taskQueue  属性 中
			判断 idlePool 是否为空，若不为空，则调用 doTask() 执行
			否则 ，判断若 当前的连接数小于最大连接数时，则调用 createFunction	属性保存的 用于创建新连接资源的函数						 
			
			应在 传入的 $callback 回调函数中，在处理完任务后 调用 release($resource) 将使用的资源句柄重新保存到	idlePool 属性中
	
	(2)	Swoole\Async\MySQL:
		a. 构造函数：
				__construct($config, $maxConnection = 100)
				其中  $config 需包含 host password user 等信息
					$config = array(
								'host' => '127.0.0.1',
								'user' => 'root',
								'password' => 'root',
								'database' => 'swoole',
							);
				会先 调用 Swoole\Async\Pool 的构造函数，
				然后调用 	Swoole\Async\Pool::create() 将 Swoole\Async\Pool::connect() 方法作为 创建新连接 的回调函数
		b. connect()
		 	先创建 \swoole_mysql 对象，
		 	然后 添加 on("close",function()) 关闭连接监听回调方法，调用 Swoole\Async\Pool::remove()将当前连接移除
		 	然后 调用  \swoole_mysql::connect(), 异步回调方法，
		 			在该回调方法中，若连接成功 则调用 Swoole\Async\Pool::join() 方法 将当前连接添加到 连接池 中，
		c. query($sql, callable $callabck)
				其中 $callback 为 执行 $sql 语句成功 后处理函数，
				在该方法中 调用  Swoole\Async\Pool::request() 方法，
				将 \swoole_mysql::query($sql, function (\swoole_mysql $db, $result))	
					封装到一个匿名函数 作为 待处理的回调函数 传入到 request() 方法 中，从而保存到 taskQueue 属性	
					其中 \swoole_mysql::query() 的回调函数中需 将 使用过的资源重新放回到 idlePool  中	
	(3)应用：
			Swoole\Async\MySQL 只能用在cli 环境中，因此可以 在 使用 swoole 搭建 的服务器 中使用，
			这样 Swoole\Async\MySQL 需常驻内存，即 在服务器启动时 已创建，
							$config = array(
						'host' => '127.0.0.1',
						'user' => 'root',
						'password' => 'root',
						'database' => 'swoole',
					);
			 global $mysql_async; 		
			 $mysql_async = new Swoole\Async\MySQL($config);
			  	
			然后在 控制器中直接使用：
					global $mysql_async;
					$user =model('User');
					$sql = $user->select()->where('user_id>3')->limit(4)->getSql();
					$mysql_async->query($sql, function($db, $result){
					
							var_dump($result);	
			
					}); 
2.异步读写 文件：
	只能在cli 环境下执行：
	(1)读取文件：
		a. swoole_async_readfile(string $filename, mixed $callback);
			文件全部内容读取完毕后会回调指定的callback函数		
			其中 $callback 参数为 function($filename,$content)
				$content 为读取到的文件内容
			将文件内容全部复制到内存，所以不能用于大文件的读取
		b. swoole_async_read(string $filename, mixed $callback, int $size = 8192, int $offset = 0)		
				   分段读取 内容，每次读取成功后调用回调函数，直到读取文件结束
   					或 回调函数 返回 False 停止下次读取（没有返回或返回 true 则继续读取）
   						读取 中文 文件时 直接输出可能会出现乱码
				其中：
					bool callback(string $filename, string $content);
						$filename，文件名称
						$content，读取到的分段内容，如果内容为空，表明文件已读完	
					$count=0;		
				  Swoole\Async::read("mydata",function($filename,$data) use (&$count){
					   $count++;
					   //在读取第三次时返回 false, 即实际上 读取了3次
					   if($count >2)
					   {
					   		return false;
					   }
					   echo $count.PHP_EOL;
					   echo $data;
					   },100,12);
 	(2)写入文件：
 		a. swoole_async_writefile('test.log', $file_content, function($filename) {
   					 echo "wirte ok.\n";
				}, $flags = 0);		
			其中  $flags 可为 FILE_APPEND 表示追加 在1.9.1或更高版本可用
			
		b. swoole_async_write(string $filename, string $content, int $offset = -1, mixed $callback = NULL);
			当offset为-1时表示追加写入到文件的末尾
3.EventLoop: 
	可将其他扩展创建的socket，PHP代码中stream/socket扩展创建的socket等加入到Swoole的EventLoop中
	(1)
		bool swoole_event_add(int $sock, mixed $read_callback, mixed $write_callback = null, int $flags = null);
			用于将一个socket加入到底层的reactor事件监听中
			参数1可以为以下三种类型：
				int，就是文件描述符,包括swoole_client的socket,以及第三方扩展的socket（比如mysql）
				stream资源，就是stream_socket_client/fsockopen 创建的资源
				sockets资源，就是sockets扩展中 socket_create创建的资源，
				不能为 fopen() 打开返回的 资源句柄	
			参数2为可读回调函数，
				在可读事件回调函数中必须使用fread、recv等函数读取Socket缓存区中的数据，
					否则事件会持续触发，
					如果不希望继续读取必须使用Swoole\Event::del移除事件监听
			参数3为可写事件回调	
				在可写事件回调函数中，写入socket之后必须调用Swoole\Event::del移除事件监听，
					否则可写事件会持续触发
			参数4为事件类型的掩码，可选择关闭/开启可读可写事件，
					如SWOOLE_EVENT_READ，SWOOLE_EVENT_WRITE，或者SWOOLE_EVENT_READ | SWOOLE_EVENT_WRITE
					
		$fd =stream_socket_client("tcp://localhost:80",$errno,$errstr,30);
 		$type="";
 		 swoole_event_add($fd,function($fd) use(&$type) {
 		     $type="read";
 	    	 file_put_contents("test2.log",fread($fd,8192),FILE_APPEND);
 		 });
 		 $line="sub.html";
 		 //写入 请求字符串， 返回数据 将触发 $fd 添加的事件监听回调函数
		$host="GET /html/$line HTTP/1.1\r\n Host:localhost\r\n\r\n";
 		fwrite($fd,$host);		
	(2)	
		bool swoole_event_set($fd, mixed $read_callback, mixed $write_callback, int $flags);
		修改事件监听的回调函数和掩码。
		其中  $fd 必须为已添加的 事件轮询 的 socket否则会报错
			对于不需要修改的回调函数可传入 null
	(3)bool swoole_event_del(int $sock);
			参数为socket的文件描述符	
		移除监听的socket。swoole_event_del应当与swoole_event_add成对使用
	(4)其他：
		a.swoole_event_defer(function(){})
			在当前EventLoop的事件循环结束、下一次事件循环启动时响应
			当有多个事件触发时，会在处理完全部触发的事件后调用，而是不对某个事件处理结束后调用	
			只对 EventLoop的事件 有效，对于 其他事件如 定时任务，则不会调用 
		b.swoole_event_wait()
			HP5.4之前的版本没有在ZendAPI中加入注册shutdown函数。
			所以swoole无法在脚本结尾处自动进行事件轮询。
			所以低于5.4的版本，需要在你的PHP脚本结尾处加swoole_event_wait函数。
			使脚本开始进行事件轮询	
4.异步定时器：
	(1)int swoole_timer_tick(int $ms, callable $callback, mixed $user_param);
		$ms 指定时间，单位为毫秒
		$callback_function 时间到期后所执行的函数。
			function callbackFunction(int $timer_id, mixed $params = null);
				$timer_id 定时器的ID，可用于swoole_timer_clear清除此定时器
				$params 由swoole_timer_tick传入的第三个参数
		$user_param 用户参数, 该参数会被传递到$callback_function中. 
				如果有多个参数可以使用数组形式. 
				也可以使用匿名函数的use语法传递参数到回调函数
	返回 定时器 ID
		定时器回调函数的执行时间不影响下一次定时器执行的时间
		定时器回调函数的执行时间过长，甚至覆盖了下一次定时器执行的时间。底层会进行时间校正，丢弃已过期的行为，在下一时间回调
	
	(2)int swoole_timer_after(int $after_time_ms, mixed $callback_function, mixed $user_param);
			swoole_timer_after函数是一个一次性定时器，执行完成后就会销毁	
	(3) bool swoole_timer_clear(int $timer_id)
			使用定时器ID来删除定时器
			
5.异步Http/WebSocket客户端： swoole_http_client																										 
	(1)构造函数：	
			__construct(string $host, int port, bool $ssl = false)
				$host目标主机的IP地址，
				$host如果为域名底层需要进行一次DNS查询，
				这是阻塞IO，请使用Swoole\Async::dnsLookup实现异步非阻塞	
	(2)属性：
			$body 请求响应后服务器端返回的内容
			$statusCode 服务器端返回的Http状态码，如404、200、500等
	(3)方法： 
			a. setHeaders(array $headers);
				  $headers必须为键值对应的数组
			   setCookies(array $cookies) 
				 设置Cookie
			   setMethod(string $method)
				 $method 必须为符合Http标准的方法名称，如果$method设置错误可能会被Http服务器拒绝请求
			   setData(string $data)
				$data 为字符串格式
				设置$data后并且未设置$method，底层会自动设置为POST
				未设置Http请求包体并且未设置$method，底层会自动设置为GET
			b.发送请求：
				get(string $path, callable $callback)
				post(string $path, mixed $data, callable $callback)	
				execute(string $path, callable $callback)
				更底层的Http请求方法，需要代码中调用setMethod和setData等接口设置请求的方法和数据
			
		Swoole\Async::dnsLookup("www.baidu.com", function ($domainName, $ip) {
						$cli = new swoole_http_client($ip, 80);
						$cli->setHeaders([
							'Host' => $domainName,
							"User-Agent" => 'Chrome/49.0.2587.3',
							'Accept' => 'text/html,application/xhtml+xml,application/xml',
							'Accept-Encoding' => 'gzip',
						]);
						$cli->get('/index.html', function ($cli) {
							echo "Length: " . strlen($cli->body) . "\n";
							echo $cli->body;
						});
					});		
		c.上传文件：addFile(string $path, string $name, string $filename = null,string $mimeType = null, int $offset = 0, int $length)
				$path 文件的路径，必选参数，不能为空文件或者不存在的文件
				$name 表单的名称，必选参数，FILES参数中的key
				$filename 文件名称，可选参数，默认为basename($path)
			$cli = new \swoole_http_client("127.0.0.1",80);
			$cli->setHeaders(['User-Agent'=>'swoole']);
			//$cli->addFile('/home/sofar/share/swoole-wiki.png','upload');
			
			$cli->addFile('/home/sofar/share/20161220143530_1358_.mp4','upload2');

			$cli->post("/upload.php",['name'=>'sofar','age'=>43],function($cli){

				echo $cli->body;
			});
			echo "waiting...\n";
		说明：
			在测试中 当上传多个文件时， 
			返回 响应结果为  -3 表示 客户端请求发出后，服务器强制切断连接
		
		d.下载文件 ：
			download(string $path, string $filename, callable $callback,  int $offset = 0);
			$path URL路径
			$filename 指定下载内容写入的文件路径，会自动写入到downloadFile属性
			$callback 下载成功后的回调函数
		测试中 并不支持 $offset 参数，从而无法实现 断点下载
				$file=__DIR__.'/video1.mp4';
				//设置 超时时间
				$cli->set(['timeout'=>60]);
				$cli->setHeaders([
					'Host'=>'localhost',
					'User-Agent'=>'Chrome/49.0.2587.3',
					'Accept'=>'',
					'Accept-Encoding'=>'gzip',
					// 'Range'=>"bytes=$offset-",
					
				]);
				$cli->download('/abc.mp4',$file,function($cli){
					var_dump($cli->downloadFile);
					var_dump($cli->statusCode);
				});
		说明：	对于较大的文件，则需设置 超时时间，否则 只能下载一部分	
		
	 e.访问 webSocket:
			upgrade(string $path, callable $callback)
				发起WebSocket握手请求，并将连接升级为WebSocket
			在 调用 upgrade方法前，必须设置onMessage回调函数	
			$cli->on('message',function($cli,$frame){
				var_dump($frame);
			});
			$cli->upgrade('/',function($cli){
				echo $cli->body;
				$cli->push("hello world");
			});
	说明：	
		(1) push(string $data, int $opcode = WEBSOCKET_OPCODE_TEXT_FRAME, bool $finish = true)
			向WebSocket服务器发送数据,
			必须在upgrade事件回调成功触发之后才能执行
			$data 要发送的数据内容，默认为UTF-8文本格式，如果为其他格式编码或二进制数据，请使用WEBSOCKET_OPCODE_BINARY
			$opcode操作类型，默认为WEBSOCKET_OPCODE_TEXT_FRAME表示发送文本
			$opcode必须为合法的WebSocket OPCODE，否则会返回失败，并打印错误信息opcode max 10