1.重载运算符：
	(1)一元运算符 -
		不会修改原对象值，因此 需返回一个新的对象
		class Test{
			public:
				const Test operator-() const
				{
					Test t(*this);
					t.set(-mValue);
					return t;
				}
		};
	(2)一元前置++ -- 后置++ --
		后置 ++ 和-- 返回值 和原值不同，因此不能返回 引用类型
		Test & operator++(); //前置
		Test operator++(int); //后置
	(3)-> 运算符：
		重载 ->() 方法 需返回 一个对象的指针类型
		在 使用 -> 运算时，会将返回的 对象的指针 再次调用 -> 运算
		t->set(29);
		C++ 解析为：
		(t.operator->())->set(29)
	(4)对象在 逻辑运算 中 转化：
		默认下 对象不能直接作为 逻辑表达式使用：
			Test t;
			if(t){} //报错
		可以通过 实现 operator void*() 转化运算， 在对象作为逻辑表达式时会调用该运算方法
		不要 定义 operator bool() 类型转化运算，因为 若存在 bool 类型转化时，
		则在 条件运算中 使用对象时，则可能会由于
			操作数为 bool 类型可以进行转化的类型(如 int), 而调用对象的bool类型转化，
			再进行比较，而导致未预期的结果
		若操作数 不为bool 类型可以进行转化的类型，则会调用对象重载的 条件表达式
	(5) 重载 new delete 运算符：
		a.	默认下 全局运算 new delete  new[] delete[] 及其重载形式
			也可以在类中重载 该运算，将调用该重载的运算
			Test * pt = new Test();
			其中 new Test()  先 调用 operator new() 为 Test 对象分配内存，然后再调用Test默认构造函数创建对象
			 new []  只能调用 类的默认构造函数来实例化 对象，而不能直接调用 带有参数的构造函数
			 因此 在 使用 new [] 分配多个类对象，并需要初始化时，则需要 在调用默认构造函数后再遍历调用 初始化函数，
				
			delete * pt;
			先 调用 pt 指定的 Test对象 的析构函数，然后调用 operator delete 再释放  内存
			
		b. 重载形式：
			class MemoryTest
			{
			public:
			  MemoryTest(){}
			  virtual ~MemoryTest(){}
			  void * operator new(std::size_t size);
			  void   operator delete(void * ptr) noexcept;
			  void * operator new[](std::size_t size);
			  void   operator delete[](void * ptr) noexcept;
			  void * operator new(std::size_t size, const std::nothrow_t&) noexcept;
			  void   operator delete(void * ptr,const std::nothrow_t&) noexcept;
			  void * operator new[](std::size_t size, const std::nothrow_t&) noexcept;
			  void   operator delete[](void * ptr, const std::nothrow_t&) noexcept;
			  void * operator new(std::size_t size, void* p);
			  void   operator delete(void * ptr, void *p) noexcept;
			  void * operator new[](std::size_t size, void* p);
			  void   operator delete[](void * ptr, void *p) noexcept;
			};
			其中
				 new(size_t) 对应 new 表达式 new[](size_t) 对应 new[] 表达式
				  new(size_t size const nothrow_t&) 对应 new (nothrow) Test(); 表达式
				  new(size_t void* p) 对应 new(ptr) Test(); 即指定开始的地址
				 其中 size_t 指定要分配的内存的大小 
				delete 表达式 只会 调用 delete(size_t) 和 delete[](size_t)两种形式	
					即 当显式 调用delete 来释放内存时，只会调用以上两种形式
				其他的4种形式 在调用 operator new后再调用 构造函数抛出异常时才会调用
						但需 对 new 表达式进行异常捕捉，否则会质监局退出
						 try{
								MemoryTest *mem;
								//当构造函数中抛出异常时，调用对应的 operator delete() 形式  
								// MemoryTest *mem = new MemoryTest();
								//delete mem;

								// mem = new MemoryTest[10];
								//delete [] mem;
								//mem = new (nothrow) MemoryTest();
								//delete mem;
							  mem =  new(nothrow) MemoryTest[10];

							  delete [] mem;
							  mem =  new(5) MemoryTest();
							  delete mem;

							  }catch(const exception &)
								{

								}
 
			当提供 void* operator new(parms) 重载时，必须同时提供 void operator delete(void*, parms)	
				对于 指定开始的地址 new 由于并不实际分配内存，可不重载相应的 operator delete
			在实现时 可以通过调用 全局对应的运算 实现
				void * MemoryTest::operator new(std::size_t size)
				{
				  std::cout << "operator new size:" <<size << std::endl;
				  //call ::operator new()
				  return ::operator new(size);
				}
				
				void  MemoryTest::operator delete(void * ptr) noexcept
				{
				  std::cout << "operator delete" <<std::endl;
				  return ::operator delete(ptr);
				}

		c.可以 重载 额外参数的形式：
			  void * operator new(std::size_t size, int extra);
			  void   operator delete(void * ptr, int extra) noexcept;
			调用形式
				new(5) Test();
		d. delete 还可以重载以下形式 
				void   operator delete(void * ptr,size_t size) noexcept;
			其中 size 指定释放的内存的大小
				当既有 operator delete(void * ptr) 和 operator delete(void * ptr,size_t)
				时，则会只调用 前者
				全局 delete 运算中 没有该形式， 
				因此在实现时，只能调用全局的 operator delete(void * ptr)形式
				
2.类模板：
	(1)可以在头文件中定义类模板， 然后 在其他文件中实现类方法，但该文件必须 在头文件中 通过 #include 引入
	但不能将 实现文件单独添加到项目或 在编译时指定该 实现文件
	只能 通过 #include 包含到一个头文件， 且 该实现文件后缀可任意，如inl
	(2)	a.选择性实例化：
			编译器 只会为 某个调用的类方法生成代码，而没有调用的方法，则不会生成代码
		b.当在模板中调用 具体类型的方法或运算时，若该类型不支持该方法或运算，则会编译错误
			但 若该类型不支持某个方法或运算，而在模板中没有调用 该方法或运算，则也不会报错	
	(3)非类型参数： 在模板中传入 具体类型值 参数，而不是类型参数
			只能为 整数类型（char int long ...） 枚举、 指针、 引用
		在使用 该类模板时，非类型参数 只能为常量，不能传入变量
		当传入不同的 类型值时，虽然 类型参数相同，但实例化的对象仍为不同类型的对象
	(4)不同类型 模板实例化 对象 的复制 赋值：
			对于有的不同类型实例化 间可以进行复制和赋值，则需添加 一个成员模板方法实现：
			如 Test<int> 和 Test<double>
				在定义了 Test(const Test<T> &) 和 Test<T>& operator=(const Test<T>&)
				仍不能直接对  Test<int> 和 Test<double> 对象相互复制和赋值
			可以定义：
				template<typename T>
				tempate<typename E>
				Test<T>::Test(const Test<E> &);
				
				template<typename T>
				tempate<typename E>
				Test<T>& Test<T>::operator(const Test<E> &);
			来实现不同类型实例化模板 对象之间的复制和赋值
		说明：
			a.成员模板方法 不会覆盖 原非模板成员方法，因此需保存两个版本方法
			b.template<typename T>
				tempate<typename E>		
		 	不能合并为 template<typename T, typename E>	
		    c. 也可以应用到 非类型参数 模板类	
	(5)特例化：
		在特例化一个模板时，必须 重写整个模板类的方法实现，
		在实现类方法时，不能在方法名前指定 template<>， 只需使用 Test<char *>:: 来引用方法名
	(6)子模板：
			template <typename T>
			class Sub :public Test<T>{}
		在引用父模板中的成员时，最好通过this 来引用，而不是直接调用
	(7) C++11 中 模板别名 和方法返回类型：
			可以通过 using otherName = Test<T>; 来为模板起别名
			且支持 部分参数具体化形式（在 C++11前不支持）
		 返回类型通过以下形式：
		 	template<typename T1, typename T2>
		 	auto func(const T1 t1, const T2 t2) ->decltype(t1+t2)
		 	{
		 		return t1+t2;
		 	}		
3. 模板 中参数类型： 
		参数类型、 非参数类型、 模板参数模板
		(1)模板参数模板：
			形式： template<typename T1, typename T2, template<typename E, typename E2> class T3 >
				若 模板参数模板中的模板参数指定了 默认参数类型，则在实现该类模板时，仍需指定该默认参数类型，不能省略
					在引用 模板参数模板类型时，只需 使用 T3 即可，不需要添加该类模板的 模板参数 
			例：	
				template <typename T,
          					template <typename E, typename Allocator=allocator<E> > class Container>
					class Test
					{

					  public:
						Test();
						Test(const Test<T,Container > &);
					  
					};
				//实现类模板方法	不能省略 模板参数模板中的默认参数类型
			
				template <typename T,
						  template <typename E, typename Allocator=allocator<E> > class Container>
				Test<T,Container>::Test(const Test<T,Container> & )
				{
		
				}
			 使用 该类模板：
			 	Test<int,vector> t; //第二个参数只传入 类模板名即可	
		 	说明：
		 		a.模板参数模板应用：
		 			当 参数类型 为  类模板类型的具体化类型时
   						应 将该该参数类型 声明为 模板参数，然后在实例化对象时，传入 具体化参数
   							Test<T,Container>::Test()
							{	
								//使用 T 类型作为 模板参数模板的具体化类型
								Container<T>* t= new Container<T>();
								t->insert(t->end(),T());
								for(typename Container<T>::iterator it = t->begin(); it!=t->end(); ++it)
								{
									cout << *it << endl;
								}
								delete t;
							}
					不能使用该形式 进行声明 类模板， 即 将模板具体化形式作为 模板参数
					template <typename T, typename Container<T> >
				b. 也可以直接使用 template<typename T,typename E>
						此时 若E 参数为 模板类型，则使用该类模板则需传入 具体化的模板类型：
							Test<int, vector<int> > t;
				c. 模板参数模板 会由于 该模板参数的个数而各异 不能统一使用一个 模板参数 来模板化而作为一个参数类型
					即 不同的模板参数模板的 参数个数 作为 可接受的模板参数模板类型 														
		
		(2)非参数类型:
				只能为 整数类型（char int long ...） 枚举、 指针、 引用
				对于非引用 类型时，只能为常量，不能传入变量
						且不能为对象等形式
				对于引用类型：可传入对象，可为变量
					template<typename T, const T & EMPTY>
					class Grid
					{
					 public:
					  Grid(size_t inWidth=kDefaultWidth, size_t inHeight=kDefaultHeight);
					  Grid(const Grid<T,EMPTY> & src);
					  virtual ~Grid();
					  Grid<T,EMPTY> & operator=(const Grid<T,EMPTY> & src);
					 protected:
					  void copyFrom(const Grid<T,EMPTY>& src);
					  T** mCells;
					  size_t mWidth, mHeight;
					  const static int  kDefaultWidth=10;
					  const static int kDefaultHeight=10;
					};
				其中 EMPTY 可为对象变量	
				引用非参数类型，在实例化 该类模板时，传入的引用非参数类型 必须为 全局变量，
						且不能为常量
					即在 main() 函数外声明的变量， 即该变量必须为 外部链接范围的变量
					 string s="aa";
					int main(){   Grid<string,s> grid2;}
					若 需使用 const 常量，则需添加 extern 关键字：
					extern const string s="aa";
		(3)递归模板：
				template<typename T,size_t N>
				 class NDGrid
				{
				 public:
				  NDGrid(int inWidth=kDefaultWidth);
				  NDGrid(const NDGrid<T,N> &src);
				  NDGrid<T,N> & operator=(const NDGrid<T,N> &src);
				  virtual ~NDGrid();
				  NDGrid<T,N-1>& operator[](int x);
				  const NDGrid<T,N-1>& operator[](int x)const;
				  size_t getSize() const{return mSize;}
				  void resize(size_t inSize);

				 protected:
				   NDGrid<T,N-1>* mCells;
				  const static  int kDefaultWidth=10;
				  void copyFrom(const NDGrid<T,N> &src);
				  size_t mSize;
				};
				
			非参数类型部分具体化，声明递归的最后模板	
				template<typename T>
				class NDGrid<T,1>
				{
				 public:
				  NDGrid(int inWidth=kDefaultWidth);
				  NDGrid(const NDGrid<T,1> &src);
				  NDGrid<T,1> & operator=(const NDGrid<T,1> &src);
				  virtual ~NDGrid();
				  T& operator[](int x);
				  const T& operator[](int x)const;
				  size_t getSize() const{return mSize;}
				  void resize(size_t inSize);

				 protected:
				  T * mCells;
				  const static  int kDefaultWidth=10;
				  void copyFrom(const NDGrid<T,1> &src);
				  size_t mSize;
				};
		(4)可变参数模板： 在 C++11 中添加
				template <typename T1,typename... Tn>
				void processValue(T1 arg1, Tn... args)
				{
				  processValue(arg1);
				  int num = sizeof...(args);
				  cout << "Args count: " << num <<endl;
				  processValue(args...);
				}
			其中 a. typename... 表示的参数类型为任意个参数类型
					使用 Tn...  声明的形参 则表示任意个参数
						args... 表示将接受到的参数 解包，以, 分隔
				b. sizeof...(args) 可获取 args 中接受到的参数个数
				c. 一般应具体化一个参数类型模板，防止无限递归：
					template <typename T>
					void processValue(T arg)
					{
					  //根据不同类型调用不同的重载函数，该形式的重载函数必须存在，否则会报错
					  handleValue(arg);
					}
